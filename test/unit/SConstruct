#test build
import os

AddOption(
    '--release-build',
    action='store_true',
    help='release build',
    default=False)
    
AddOption(
	'--with-clang',
	action='store_true',
	help='clang build',
	default=False)
	
AddOption(
	'--msan',
	action='store_true',
	help='clang build',
	default=False)
	
AddOption(
	'--usan',
	action='store_true',
	help='clang build',
	default=False)
	
AddOption(
	'--asan',
	action='store_true',
	help='clang build',
	default=False)

print("UNITTESTS")

rootpath = Dir('../../').abspath
buildpath = os.path.join(rootpath, 'build')
pluginpath = os.path.join(rootpath, '../')
outpost_core_path = os.path.join(pluginpath, 'outpost-core')


envGlobal = Environment(toolpath=[os.path.join(pluginpath, 'scons-build-tools/site_tools')],
                        tools=['utils_buildformat'],
                        BASEPATH=os.path.abspath('.'),
                        ENV=os.environ)

if GetOption('release_build'):
    print("release_build")
    buildfolder = os.path.join(buildpath, 'release')
    envGlobal['CCFLAGS_optimize'] = ['-O3']
else:
    print("debug_build")
    buildfolder = buildfolder = os.path.join(buildpath, 'debug')
    envGlobal['CCFLAGS_optimize'] = ['-O0']
    envGlobal.ParseFlags('-DDEBUG')
    
if GetOption('with_clang'):
	envGlobal.Tool('compiler_hosted_llvm')
	buildfolder += "_llvm"
else:
	envGlobal.Tool('compiler_hosted_gcc')
	
envGlobal.Tool('settings_buildpath')
envGlobal['BUILDPATH'] = os.path.abspath(buildfolder)
envGlobal['ROOTPATH'] = rootpath
envGlobal['OUTPOST_CORE_PATH'] = os.path.join(pluginpath, 'outpost-core')
envGlobal['PLUGINPATH'] = pluginpath
envGlobal['CXXFLAGS_language'] = ['-std=c++11']

clangcflags = [
	#'-v',
	'-fno-omit-frame-pointer',
	'-fno-optimize-sibling-calls',
]
if GetOption('with_clang'):
	if GetOption('msan'):
		clangcflags.extend([
			'-fsanitize=memory',
			'-stdlib=libc++',
		])
	elif GetOption('usan'):
		clangcflags.extend([
			'-fsanitize=undefined',
		])
	elif GetOption('asan'):
		clangcflags.extend([
			'-fsanitize=address',
		])
	
if GetOption('with_clang'):
	envGlobal.Append(CCFLAGS_target = clangcflags)
	envGlobal.Append(CXXFLAGS_target = clangcxflags)
	envGlobal.Append(LINKFLAGS_target = clanglflags)

envGlobal.Append(CPPPATH=[
	#This defines wich config will be used.	This may be a local copy as well.
	os.path.abspath(os.path.join(rootpath, "config/flashSimu"))
])

envGlobal.SConscript([
	#this is needed for simudriver, b.c. it chooses its Config based on simu/config.hpp
	os.path.join('$PLUGINPATH', 'satfon-simulation/simu/SConscript'),
	
    os.path.join(rootpath, 'src/SConscript'),
	os.path.join(rootpath, 'src/driver/SConscript.simudriver'),
    os.path.join(outpost_core_path, 'modules/SConscript.test'),
    ],
	exports='envGlobal'
)


env = envGlobal.Clone()
print("Libs of unittests: ")
for l in env['LIBS']:
	print ("\t" + str(l))
print("CPPPATH of unittests: ")
for p in envGlobal['CPPPATH']:
	print ("\t" + str(p))

files = Glob('*.cpp')

program = env.Program('unittest', files)

env.Alias('test', '$BUILDPATH')
env.Default('test')
