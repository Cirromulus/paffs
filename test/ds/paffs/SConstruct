#test build
import os

AddOption(
    '--release-build',
    action='store_true',
    help='release build',
    default=False)
    
AddOption(
	'--with-clang',
	action='store_true',
	help='clang build',
	default=False)
	
AddOption(
	'--msan',
	action='store_true',
	help='clang build',
	default=False)
	
AddOption(
	'--usan',
	action='store_true',
	help='clang build',
	default=False)
	
AddOption(
	'--asan',
	action='store_true',
	help='clang build',
	default=False)

print("UNITTESTS")

rootpath = Dir('../../../').abspath
extpath = os.path.join(rootpath, 'ext')
outpost_core_path = os.path.join(extpath, 'outpost-core')


envGlobal = Environment(toolpath=[os.path.join(extpath, 'scons-build-tools/site_tools')],
                        tools=['utils_buildformat'],
                        BASEPATH=os.path.abspath('.'),
                        ENV=os.environ)

if GetOption('release_build'):
    buildfolder = os.path.join(rootpath, 'release')
    envGlobal['CCFLAGS_optimize'] = ['-O3']
else:
    buildfolder = buildfolder = os.path.join(rootpath, 'debug')
    envGlobal['CCFLAGS_optimize'] = ['-O0']
    envGlobal.ParseFlags('-DDEBUG')
    
if GetOption('with_clang'):
	envGlobal.Tool('compiler_hosted_llvm')
else:
	envGlobal.Tool('compiler_hosted_gcc')
envGlobal.Tool('settings_buildpath')
envGlobal['BUILDPATH'] = os.path.abspath(buildfolder)
envGlobal['ROOTPATH'] = rootpath
envGlobal['OUTPOST_CORE_PATH'] = outpost_core_path
envGlobal['EXTPATH'] = os.path.join(extpath, 'outpost-core')
envGlobal['CXXFLAGS_language'] = ['-std=c++11']

envGlobal['PAFFSCONFIG'] = 'default'

clangcflags = [
	#'-v',
	'-fno-omit-frame-pointer',
	'-fno-optimize-sibling-calls',
]

clangcxflags = [
	#'-I' + libc_msan_path + '/include/c++/v1',
]

if GetOption('with_clang'):
	if GetOption('msan'):
		clangcflags.extend([
			'-fsanitize=memory',
			#'-I' + libc_msan_path + '/include/',
			'-stdlib=libc++',
		])
	elif GetOption('usan'):
		clangcflags.extend([
			'-fsanitize=undefined',
			#'-fsanitize-memory-track-origins'
		])
	elif GetOption('asan'):
		clangcflags.extend([
			'-fsanitize=address',
		])
	
clangcxflags.extend(clangcflags)

clanglflags = [
	#'-v',
	#'-L' + libc_msan_path + '/bin/',
	#'-L' + libc_msan_path + '/lib/',
]


if GetOption('with_clang'):
	envGlobal.Append(CCFLAGS_target = clangcflags)
	envGlobal.Append(CXXFLAGS_target = clangcxflags)
	envGlobal.Append(LINKFLAGS_target = clanglflags)

envGlobal.SConscript([
    os.path.join(rootpath, 'ds/paffs/SConscript'),
    os.path.join(rootpath, 'ds/paffs/driver/SConscript.simudriver'),
    os.path.join(outpost_core_path, 'modules/SConscript.test'),
    ],
	exports='envGlobal'
)

env = envGlobal.Clone()

files  = Glob('*.cpp')

#print("Libs von UNITTEST: " + str(env['LIBS']))
program = env.Program('unittest', files)

#sinstall = env.InstallAs('$BUILDPATH/unittest', program)
env.Alias('test', '$BUILDPATH')
env.Default('test')