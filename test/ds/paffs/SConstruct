#test build
import os

rootpath = Dir('../../../').abspath
extpath = os.path.join(rootpath, 'ext')
outpost_core_path = os.path.join(extpath, 'outpost-core')

print("UNITTESTS")

envGlobal = Environment(toolpath=[os.path.join(extpath, 'scons-build-tools/site_tools')],
                        tools=['utils_buildformat'],
                        BASEPATH=os.path.abspath('.'),
                        ENV=os.environ)

buildfolder = os.path.join(rootpath, 'release')
envGlobal['CCFLAGS_optimize'] = ['-O2']
envGlobal.Tool('compiler_hosted_gcc')
envGlobal.Tool('settings_buildpath')
envGlobal['BUILDPATH'] = os.path.abspath(buildfolder)
envGlobal['ROOTPATH'] = rootpath
envGlobal['OUTPOST_CORE_PATH'] = outpost_core_path
envGlobal['CXXFLAGS_language'] = ['-std=c++11']


envGlobal.SConscript([
    os.path.join(rootpath, 'ds/paffs/SConscript'),
    os.path.join(rootpath, 'ds/paffs/driver/SConscript.simudriver'),
    os.path.join(outpost_core_path, 'modules/SConscript.test'),
    ],
	exports='envGlobal'
)

env = envGlobal.Clone()


#Dirty Hack. I dont understand why this is needed twice, 
#normal build succeedes with same library order
#env.Append(LIBS=[
#	'simu',
#])


env.Append(CCFLAGS_target = [
	#'-v'
])

files  = Glob('*.cpp')

#print("Libs von UNITTEST: " + str(env['LIBS']))
program = env.Program('unittests', files)

#'files' is a dirty hack copying all cpp's to install dir.
#But at least unittests appear there. If it was replaced by 'program'
#it would not work 
install = env.Install('$BUILDPATH', files)
env.Alias('test', '$BUILDPATH')
env.Default('test')