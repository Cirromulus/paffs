pipeline {
    agent {
        label 'x86_64'
    }
    post {
        failure {
            updateGitlabCommitStatus name: 'build', state: 'failed'
        }
        success {
            updateGitlabCommitStatus name: 'build', state: 'success'
        }
    }
    options {
        gitLabConnection('AVS GitLab')
        buildDiscarder(logRotator(numToKeepStr:'10'))
        skipDefaultCheckout()
    }
    triggers {
        pollSCM('H 0 * * *')
    }
    stages {
        stage('checkout') {
            steps {
                dir('paffs') {
                    // https://hbryavsci1l.hb.dlr.de:8929/avionics-software-open/paffs.git
                    checkout scm
                }
                dir('scons-build-tools') {
                    git credentialsId: 'jenkins-ssh-gitlab',
                        url: 'ssh://git@hbryavsci1l.hb.dlr.de:10022/avionics-software-open/scons-build-tools.git'
                }
                dir('satfon-simulation') {
                    git credentialsId: 'jenkins-ssh-gitlab',
                        url: 'ssh://git@hbryavsci1l.hb.dlr.de:10022/avionics-software-open/satfon-simulation.git'
                }
                dir('outpost-core') {
                    checkout([
                        $class: 'GitSCM',
                        branches: [[name: '*/master']],
                        doGenerateSubmoduleConfigurations: false,
                        extensions: [
                            [$class: 'SubmoduleOption', parentCredentials: true, recursiveSubmodules: true]
                        ],
                        submoduleCfg: [],
                        userRemoteConfigs: [[
                            credentialsId: 'jenkins-ssh-gitlab',
                            url: 'ssh://git@hbryavsci1l.hb.dlr.de:10022/avionics-software-open/outpost-core.git'
                        ]]
                    ])
                }
            }
        }
        stage("build-integration") {
            steps {
                dir('paffs') {
                    sh 'make test-integration-bigflash'
                }
            }
        }
        stage("collect-testresults") {
            steps {
                dir('paffs') {
                    step([$class: 'XUnitPublisher',
                        testTimeMargin: '3000',
                        thresholdMode: 1,
                        thresholds: [
                            [
                                $class: 'FailedThreshold',
                                failureNewThreshold: '',
                                failureThreshold: '0',
                                unstableNewThreshold: '',
                                unstableThreshold: ''
                            ],
                            [
                                $class: 'SkippedThreshold',
                                failureNewThreshold: '',
                                failureThreshold: '',
                                unstableNewThreshold: '',
                                unstableThreshold: '0']
                            ],
                            tools: [[
                                $class: 'GoogleTestType',
                                deleteOutputFiles: true,
                                failIfNotNew: true,
                                pattern: 'build/release/test/*.xml',
                                skipNoTestFiles: false,
                                stopProcessingIfError: true]]])
                }
            }
        }
    }
}
